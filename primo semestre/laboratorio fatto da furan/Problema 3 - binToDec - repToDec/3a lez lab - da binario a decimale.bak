;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |3a lez lab - da binario a decimale|) (read-case-sensitive #t) (teachpacks ((lib "drawings.ss" "installed-teachpacks"))) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ((lib "drawings.ss" "installed-teachpacks")) #f)))
;; Da binario a decimale (con segno, parte intera, parte frazionaria)

;;     ### Ordine di attacco := struttura procedura complessiva ###
;; La procedura complessiva (ossia quella chiamata) ingloba in sé tutte
;; e *quattro (o tre, se pt intera messa insieme a pt frazionaria con procedura di alto ordine)
;; le altre procedure CORE per la risoluzione del problema posto

;;     ### Procedure supplementari / ausiliarie ###
;;    @@ sono poste in ordine di implementazione @@
;; 1) Parser del segno:
;;        se il primo carattere == \#-, allora è negativo, altrimenti è positivo
;; 2) Separatore parte intera e parte frazionaria:
;;        se trova il punto, dà la substring precedente al punto alla procedura di conversione con operazione moltiplicazione
;;        e la substring successiva al punto alla procedura di conversione con oeprazione divisione
;; 3) Convertitore:
;;        Qua so' cazzi

(define positive?
  (lambda (str)
    (let (sign (string-ref str 0))
      (if
  ))